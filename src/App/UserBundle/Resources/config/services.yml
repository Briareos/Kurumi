parameters:
    # relative to cwd, which is set to /web
    geoip.class: App\UserBundle\Util\GeoIp
    geoip.location: %kernel.root_dir%/Resources/geoip
    geoname.class: App\UserBundle\Util\GeonameLookup
    geoname.cache_id: geoname_lookup
    geoname.cache_prefix: geoname
    geoname.lookup_url: "http://www.geonames.org/getJSON"
    geoname.lookup_paremeters: []
    city_manager.class: App\UserBundle\Entity\CityManager
    user_manager.class: App\UserBundle\Entity\UserManager
    user_manager.user_class: App\UserBundle\Entity\User

services:
    # Form types #
    form.type.detect_timezone:
        class: App\UserBundle\Form\Type\DetectTimezoneType
        tags:
            - { name: form.type, alias: detect_timezone }
    form.type.gender:
        class: App\UserBundle\Form\Type\GenderType
        tags:
            - { name: form.type, alias: gender }

    # Geoname and GeoIP services #
    geoname_lookup:
        class: %geoname.class%
        arguments: [%geoname.lookup_url%, %geoname.lookup_paremeters%]
        calls:
            - [ setCacheManager, [ @knp_zend_cache.manager, %geoname.cache_id%, %geoname.cache_prefix% ] ]
            - [ setLogger, [ @logger ] ]
    geoip:
        class: %geoip.class%
        arguments: [%geoip.location%, @kernel]
    geoip.twig.extension:
        class: App\UserBundle\Twig\Extension\GeoIp
        arguments: [@geoip]
        tags:
            - { name: twig.extension }
    md5.twig.extension:
        class: App\UserBundle\Twig\Extension\Md5
        tags:
            - { name: twig.extension }

    # Entity managers #
    city_manager:
        class: %city_manager.class%
        arguments: [@doctrine.orm.entity_manager, @geoname_lookup]
    user_manager:
        class: %user_manager.class%
        arguments: [@doctrine.orm.entity_manager, @security.encoder_factory, %user_manager.user_class%]
    # Register/login users via Facebook OAuth #
    facebook.user:
        class: App\UserBundle\Security\User\Provider\FacebookProvider
        arguments: [@fos_facebook.api, @doctrine.orm.entity_manager, @validator]

    # Sonata Admin Bundle services #
    sonata.admin.user:
        class: App\UserBundle\Admin\UserAdmin
        arguments: [ null, App\UserBundle\Entity\User, SonataAdminBundle:CRUD ]
        tags:
            - { name: sonata.admin, manager_type: orm, group: users_group, label: admin.label.users }
        calls:
            - [ setUserManager, [ @user_manager ] ]
    sonata.admin.profile:
        class: App\UserBundle\Admin\ProfileAdmin
        arguments: [ null, App\UserBundle\Entity\Profile, SonataAdminBundle:CRUD ]
        tags:
            - { name: sonata.admin, manager_type: orm, group: users_group, label: admin.label.profiles }
    user.permission_container:
        class: App\UserBundle\Admin\PermissionContainer
        tags:
            - { name: security.permission_container }
